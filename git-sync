#!/bin/sh
# Documentation
#   Options:
#       h|help    - help
#       A|all     - add all the files
#       f|file    - list of files to be added
#       m|message - commit message
#       p|push    - push
#       n|no-push - push
#       y|yes     - assume sensible defaults
#
#   Functionality:
#       when no parametres are passed script does not execute
#       -h and --help bring up help (as can be expected)
#       -A and --all is equivalent to running git add -A or git add .
#       -f and --file lists the files to be syncen
#       -m and --message is the same as git commit -m, it stores the commit message
#       -p and --push is push to a remote fter commiting (this behaviour is default)
#       -n and no-push is the opposit of push and keeps the commit local
#       -y and --yes is equivalent to git sync -A -p -m "Modified $files"






message=""
files=""







if [ -z "$1" ]; then
    echo "Usage will be here later"
    exit 1
fi

while [ -n "$1" ]; do # while loop starts

	case "$1" in

	-h|-\?)
            echo "-h option passed"
            if [ -n "$2" ]; then
                echo "-h Does not take parameters and is incompatible with other options"
                exit 1
            fi

            ;; # Message for -a option



	-A|--all)
            if [ -n "$2" ]; then
                if [ "$(echo $2 | cut -c1-1)" != "-" ]; then
                    echo "-A does not take options"
                    exit 1
                fi
            fi

            echo "-A option passed"


            ;; # Message for -b option

	-f|--file)
            if [ -z "$2" ]; then
                echo "-f requires a list of files"
                exit 1
            fi

            if [ "$(echo $2 | cut -c1-1)" = "-" ]; then
                echo "-f requires a list of files"
                exit 1
            fi

            while [ -n "$2" ] && [ "$(echo $2 | cut -c1-1)" != "-" ]; do
                files=$(echo "$files" "$2")
                shift
            done
            echo "$files"

            ;; # Message for -c option

	-m|--message)
            if [ -z "$2" ]; then
                echo "-m requires a message"
                exit 1
            fi

            if [ "$(echo $2 | cut -c1-1)" = "-" ]; then
                echo "-m requires a message"
                exit 1
            fi

            message="$2"
            echo "-m option passed with message \"$message\""
            shift

            ;; # Message for -c option

	-p|--push)
            if [ -n "$2" ]; then
                if [ "$(echo $2 | cut -c1-1)" != "-" ]; then
                    echo "-p does not take options"
                    exit 1
                fi
            fi

            echo "-p option passed"

            ;; # Message for -c option

	-n|--no-push)
            if [ -n "$2" ]; then
                if [ "$(echo $2 | cut -c1-1)" != "-" ]; then
                    echo "-n does not take options"
                    exit 1
                fi
            fi

            echo "-n option passed"
            ;; # Message for -c option

	-y|--yes)
            if [ -n "$2" ]; then
                if [ "$(echo $2 | cut -c1-1)" != "-" ]; then
                    echo "-y does not take options"
                    exit 1
                fi
            fi
            echo "-y option passed"

            ;; # Message for -c option

	*)
            echo "Option $1 not recognized"

            ;; # Unknown option found

	esac

	shift

done
